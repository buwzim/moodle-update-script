#!/bin/bash

#======================================================#
#  THIS VERSION                                        #
#======================================================#
#   Leuphana Universität Lüneburg                      #
#                                                      #
#   Author:                                            #
#      Sebastian Sennewald                             #
#                                                      #
#   Sources:                                           #
#      https://github.com/mizcm/moodle-update-script   #
#                                                      #
#   License:                                           #
#      GPLv3, see LICENSE file                         #
#                                                      #
#======================================================#


#======================================================#
#  FORKED FROM                                         #
#======================================================#
#   Bergische Universität Wuppertal                    #
#                                                      #
#   Author:                                            #
#      Sebastian Sennewald                             #
#                                                      #
#   Sources:                                           #
#      https://github.com/buwzim/moodle-update-script  #
#                                                      #
#   License:                                           #
#      GPLv3, see LICENSE file                         #
#                                                      #
#======================================================#


# No Colour
NC='\033[0m'

# Colour Codes
WHITE='\033[1;37m'
LIGHTGREEN='\033[1;32m'
ORANGE='\033[0;33m'
LIGHTRED='\033[1;31m'
LIGHTPURPLE='\033[1;35m'
LIGHTCYAN='\033[1;36m'


# functions
function checkstatus() {

        # set to default
        CONTINUE="null"

        if test $? -ne 0
        then
                # ask user to continue
                until test "$CONTINUE" = "y" -o "$CONTINUE" = "n"
                do
                        printf "${LIGHTRED}%s${NC} ${ORANGE}%s${NC}" "FAILED > Continue?" "(y/n)" 1>&2
                        read -r CONTINUE
                done

                        if test "$CONTINUE" = "n"
                        then
                                printf "\n"
                                printf "%s \n" "process cancelled"
                                printf "\n"
                                exit 66
                        fi

        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi

        # set to default
        CONTINUE="null"
}

# start
tput clear

printf "\n"
printf "\n"
printf "${WHITE}%s${NC}\n" "+------------------------------+"
printf "${WHITE}%s${NC}\n" "+     moodle update script     +"
printf "${WHITE}%s${NC}\n" "+------------------------------+"
printf "\n"

# get script path
SCRIPT_PATH=$(dirname "$(realpath $0)")


# check if version parameter is given
if test -z $1
then
        printf "%s" "enter target version (\"x.y\"): "
        read -r MOODLE_VERSION_NEXT
else
        MOODLE_VERSION_NEXT=$1
fi


# check and create settings file
if test ! -e $SCRIPT_PATH/settings.conf
then
        # create default settings if file doesn't exists
        printf "%-25s %s" "create settings file" ": "

                echo '# Do not delete this line' > $SCRIPT_PATH/settings.conf
                echo 'SETTINGS_LOADED="TRUE"' >> $SCRIPT_PATH/settings.conf
                echo ' ' >> $SCRIPT_PATH/settings.conf
                echo '# Adapt this list to your settings' >> $SCRIPT_PATH/settings.conf
                echo 'WEBUSER="www-data"' >> $SCRIPT_PATH/settings.conf
                echo 'WEB_PATH="/var/www"' >> $SCRIPT_PATH/settings.conf
                echo 'PHP_PATH="/usr/bin/php"' >> $SCRIPT_PATH/settings.conf
                echo 'CURL_PATH="/usr/bin/curl"' >> $SCRIPT_PATH/settings.conf
                echo 'UNZIP_PATH="/usr/bin/unzip"' >> $SCRIPT_PATH/settings.conf

        checkstatus
fi

# load settings
source $SCRIPT_PATH/settings.conf

        # check if file got loaded
        printf "%-25s %s" "load settings" ": "

                if test "$SETTINGS_LOADED" = "TRUE"
                then
                        printf "${LIGHTGREEN}%s${NC}\n" "OK"
                else
                        printf "${LIGHTRED}%s${NC}\n" "FAILED" 1>&2
                        exit 2
                fi


# set settings
CONTINUE="null"
MOODLE_LINK_NAME="moodle"
MOODLE_PATH="$WEB_PATH/$MOODLE_LINK_NAME"
MOODLE_CONFIG="$MOODLE_PATH/config.php"


# check moodle config file
printf "%-25s %s" "moodle config" ": "

        if test ! -e $MOODLE_CONFIG
        then
                printf "${LIGHTRED}%s${NC} \n" "FAILED" 1>&2
                exit 3
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"


                echo "$1" | grep "^moodle_[0-9]*\.[0-9]*_" > /dev/null
        fi


# get moodle data path
TEMP1=$(grep "^\$CFG->dataroot" $MOODLE_PATH/config.php | cut -d" " -f4)
TEMP2=${TEMP1//\'}
MOODLE_DATA_PATH=${TEMP2//\;}

# check moodle data path
printf "%-25s %s" "moodle data folder" ": "

        if test ! -d $MOODLE_DATA_PATH
        then
                printf "${LIGHTRED}%s${NC} \n" "FAILED" 1>&2
                exit 4
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


# language files
LANG_LICENSE_EN="$MOODLE_PATH/lang/en/license.php"
LANG_LICENSE_DE="$MOODLE_DATA_PATH/lang/de/license.php"

# build url version parameter
MOODLE_VERSION_NEXT_URL=${MOODLE_VERSION_NEXT//.}

# get current moodle version
if test -h $MOODLE_PATH
then
        LINK_CURRENT_TARGET=$(readlink "$MOODLE_PATH")
        MOODLE_PATH_REAL="$LINK_CURRENT_TARGET"
        MOODLE_VERSION_NOW=${LINK_CURRENT_TARGET//$WEB_PATH\/moodle_}
fi

# check if url parameter is given
if test $2
then
        MOODLE_DOWNLOAD_URL=$2
        MOODLE_DOWNLOAD_FILE=${MOODLE_DOWNLOAD_URL##*/}
else
        MOODLE_DOWNLOAD_FILE="moodle-latest-${MOODLE_VERSION_NEXT_URL}.zip"
        MOODLE_DOWNLOAD_URL="https://download.moodle.org/download.php/direct/stable${MOODLE_VERSION_NEXT_URL}/$MOODLE_DOWNLOAD_FILE"

        # example v3.9: https://download.moodle.org/download.php/direct/stable39/moodle-latest-39.zip
        # example v4.1: https://download.moodle.org/download.php/direct/stable401/moodle-latest-401.zip
fi


MOODLE_TEMP="moodle_temp"
MOODLE_TEMP_PATH="$WEB_PATH/$MOODLE_TEMP"

MOODLE_NEXT="moodle_$MOODLE_VERSION_NEXT"
MOODLE_NEXT_PATH="$WEB_PATH/$MOODLE_NEXT"

BACKUP_DATE=$(date '+%F_%H-%M-%S')
BACKUP_NAME="moodle_${MOODLE_VERSION_NOW}_$BACKUP_DATE"
BACKUP_PATH="$WEB_PATH/$BACKUP_NAME"



# ask if versions are corret
printf "\n"
printf "%-25s ${LIGHTCYAN}%s${NC} \n" "target version" ": $MOODLE_VERSION_NEXT"
printf "%-25s ${LIGHTCYAN}%s${NC} \n" "current version" ": $MOODLE_VERSION_NOW"
printf "\n"


# show download url
printf "%-25s %s ${LIGHTPURPLE}%s${NC} \n" "download url" ":" "$MOODLE_DOWNLOAD_URL"


# download latest moodle
printf "%-25s %s" "download moodle" ": "

        wget -q $MOODLE_DOWNLOAD_URL
        checkstatus


# file size
printf "%-25s %s" "file size (MB)" ": "

        FILESIZE=$(cat $MOODLE_DOWNLOAD_FILE | wc -c)
        FILESIZE=$(( FILESIZE / 1024 / 1024 ))

        printf "${LIGHTCYAN}%d${NC}" "$FILESIZE"

        if test $FILESIZE -eq 0
        then
                printf "${LIGHTRED}%s${NC} \n" " FAILED" 1>&2
                exit 5
        else
                printf "\n"
        fi


# check web path: folder
printf "%-25s %s" "web path (folder)" ": "

        if test ! -d $WEB_PATH
        then
                printf "${LIGHTRED}%s${NC} \n" "FAILED" 1>&2
                exit 6
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


# check web path: access
printf "%-25s %s" "web path (access)" ": "

        if test ! -e $WEB_PATH
        then
                printf "${LIGHTRED}%s${NC} \n" "FAILED" 1>&2
                exit 7
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


# check php
printf "%-25s %s" "php" ": "

        if test ! -e $PHP_PATH
        then
                printf "%s \n" "FAILED"  1>&2
                exit 8
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


# check if cURL is available
printf "%-25s %s" "cURL" ": "

        if test ! -e $CURL_PATH
        then
                printf "${LIGHTRED}%s${NC} \n" "FAILED" 1>&2
                exit 9
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


# check current moodle path
printf "%-25s %s" "moodle path" ": "

        if test ! -d $MOODLE_PATH_REAL
        then
                printf "${LIGHTRED}%s${NC} \n" "FAILED" 1>&2
                exit 10
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


# go to web folder
printf "%-25s %s" "go to web folder" ": "

        cd $WEB_PATH
        checkstatus


# all pre-checks done
printf "\n"
printf "%s \n" "all pre-checks successfull"

        # ask user to continue
        until test "$CONTINUE" = "y" -o "$CONTINUE" = "n"
        do
                printf "${ORANGE}%-25s${NC} %s" "continue? (y/n)" ": "
                read -n 1 CONTINUE
        done

                if test "$CONTINUE" = "n"
                then
                        printf "\n"
                        printf "%s \n" "goodbye."
                        printf "\n"
                        exit 11
                fi

# user wants to continue
printf "\n"


# moodle -> maintenance mode -> enable
printf "%-25s %s" "enable maintenance" ": "

        $PHP_PATH $MOODLE_PATH_REAL/admin/cli/maintenance.php --enableold > /dev/null
        checkstatus


# time to wait in maintenance mode until work continues
printf "${ORANGE}%-25s${NC} %s" "minutes to wait" ": "

        read -r WAIT_FOR_MAINTENANCE

                until test $WAIT_FOR_MAINTENANCE -ge 0
                do
                        printf "\n"
                        printf "${ORANGE}%-25s${NC} %s" "minutes to wait" ": "

                        read -r WAIT_FOR_MAINTENANCE
                done

        printf "%-25s %s" "waiting ..." ": "
        sleep ${WAIT_FOR_MAINTENANCE}m

        printf "${LIGHTGREEN}%s${NC}\n" "OK"


# stay in maintenance mode?
until test "$STAY_IN_MAINTENANCE" = "y" -o "$STAY_IN_MAINTENANCE" = "n"
do
        printf "${ORANGE}%-25s${NC} %s" "stay in maintenance (y/n)" ": "
        read -n 1 STAY_IN_MAINTENANCE
done

printf "\n"


# create backup
printf "%-25s %s" "moodle backup" ": "

        cp -r $MOODLE_PATH_REAL/ $BACKUP_PATH/
        checkstatus


# delete old moodle folder
printf "%-25s %s" "delete old moodle" ": "

        rm -r "$MOODLE_PATH_REAL"
        checkstatus


# unzip
printf "%-25s %s" "unzip to temp folder" ": "

        unzip -q $WEB_PATH/$MOODLE_DOWNLOAD_FILE -d $MOODLE_TEMP_PATH
        checkstatus


printf "%-25s %s" "move to version folder" ": "

        mv $MOODLE_TEMP_PATH/moodle/ $MOODLE_NEXT_PATH/
        checkstatus


# clean up
printf "%-25s %s" "delete temp folder" ": "

        rm -r $MOODLE_TEMP_PATH/
        checkstatus


printf "%-25s %s" "delete downloaded file" ": "

        rm $MOODLE_DOWNLOAD_FILE
        checkstatus


# copy config
printf "%-25s %s" "copy: config.php" ": "

        if test -e $BACKUP_PATH/config.php
        then
                cp $BACKUP_PATH/config.php $MOODLE_NEXT_PATH/config.php
                checkstatus
        else
                printf "${LIGHTRED}%s${NC} \n" "file missing" 1>&2
                exit 12
        fi


# copy plugins
printf "\n"
printf "%s \n" "list missing plugins:"

        # create lists of all plugins
        $(cd $BACKUP_PATH; find . -name 'version.php' > /tmp/moodle-update-diff-list_old.txt)
        $(cd $MOODLE_NEXT_PATH; find . -name 'version.php' > /tmp/moodle-update-diff-list_new.txt)

        # diff which plugins are only in the old moodle directory
        PLUGIN_DIFF=$(diff /tmp/moodle-update-diff-list_old.txt /tmp/moodle-update-diff-list_new.txt | grep "<")

        # clean up
        PLUGIN_DIFF=${PLUGIN_DIFF//< .\//}
        PLUGIN_DIFF=${PLUGIN_DIFF///version.php/}
        echo $PLUGIN_DIFF > /tmp/moodle-update-diff-list_final.txt

        # create array of missing plugins
        PLUGIN_DIFF_ARRAY=($PLUGIN_DIFF)

        # print array
        echo ${#array[*]}
        printf "\n"

        # choose copy mode
        until test "$COPYALL" = "y" -o "$COPYALL" = "n"
        do
                printf "${ORANGE}%-30s${NC}" "copy ALL plugins? (y/n): "
                read -n 1 COPYALL
                echo " "
        done

        # iterate through missing plugins
        for PLUGIN_PATH in ${PLUGIN_DIFF_ARRAY[@]}
        do
                # pre-define user input if copy mode is set to ALL
                if test "$COPYALL" = "y"
                then
                        CONTINUE="y"
                fi

                # copy folder if wanted
                until test "$CONTINUE" = "y" -o "$CONTINUE" = "n"
                do
                        printf "%-66s %s" "Copy $PLUGIN_PATH? (y/n)" ": "
                        read -n 1 -s CONTINUE
                done

                # copy yes
                if test "$CONTINUE" = "y"
                then
                        # create parent folder if missing
                        if test ! -d $MOODLE_NEXT_PATH/$PLUGIN_PATH
                        then
                                mkdir -p $MOODLE_NEXT_PATH/$PLUGIN_PATH
                        fi

                        cp -r $BACKUP_PATH/$PLUGIN_PATH/ $MOODLE_NEXT_PATH/${PLUGIN_PATH%/*}

                        if test "$COPYALL" = "y"
                        then
                                printf "%-46s %s" "Copy $PLUGIN_PATH" ": "
                        fi

                        checkstatus
                else
                        printf "%s \n" "SKIPPED"
                fi

                # set to default
                CONTINUE="null"
        done


# update sym link
printf "\n"
printf "%-46s %s" "update symlink" ": "

        rm $MOODLE_PATH && ln -s $MOODLE_NEXT_PATH $MOODLE_PATH
        checkstatus


# update moodle
printf "%-25s \n" "update moodle ..."

        $PHP_PATH $MOODLE_PATH/admin/cli/upgrade.php --non-interactive

        if test $? -ne 0
        then
                printf "\n"
                printf "%-25s %s ${LIGHTRED}%s${NC}\n" "upgrade moodle" ":" " FAILED" 1>&2
                exit 13
        else
                printf "\n"
                printf "%-25s %s ${LIGHTGREEN}%s${NC}\n" "upgrade moodle" ":" "OK"
        fi


# modify license lang strings
printf "%-25s %s" "language strings (en)" ": "

        grep 'ungeprueft' $LANG_LICENSE_EN > /dev/null

        if test $? -eq 1
        then
                echo "\$string['freielizenz'] = 'Freie Lizenz';" >> $LANG_LICENSE_EN
                echo "\$string['52a'] = 'VG Wort';" >> $LANG_LICENSE_EN
                echo "\$string['gemeinfrei'] = 'Gemeinfrei';" >> $LANG_LICENSE_EN
                echo "\$string['ungeprueft'] = 'Ungeprüft';" >> $LANG_LICENSE_EN

                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


printf "%-25s %s" "language strings (de)" ": "

        grep 'ungeprueft' $LANG_LICENSE_DE > /dev/null

        if test $? -eq 1
        then
                echo "\$string['freielizenz'] = 'Freie Lizenz';" >> $LANG_LICENSE_DE
                echo "\$string['52a'] = 'VG Wort';" >> $LANG_LICENSE_DE
                echo "\$string['gemeinfrei'] = 'Gemeinfrei';" >> $LANG_LICENSE_DE
                echo "\$string['ungeprueft'] = 'Ungeprüft';" >> $LANG_LICENSE_DE

                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        else
                printf "${LIGHTGREEN}%s${NC}\n" "OK"
        fi


# set rights
printf "%-25s %s" "update permissions" ": "

        chown -R "$WEBUSER:$WEBUSER" $MOODLE_NEXT_PATH && chown -R "$WEBUSER:$WEBUSER" $MOODLE_PATH
        checkstatus


# moodle -> maintenance mode -> disable
if test "$STAY_IN_MAINTENANCE" = "n"
then
        printf "%-25s %s" "disable maintenance" ": "

        $PHP_PATH $MOODLE_PATH/admin/cli/maintenance.php --disable > /dev/null
        checkstatus
else
        printf "%-25s %s ${LIGHTGREEN}%s${NC}\n" "stay in maintenance" ":" "OK"
fi


# delete cache
printf "%-25s %s" "purge cache" ": "

        $PHP_PATH $MOODLE_PATH/admin/cli/purge_caches.php
        checkstatus


printf "\n"
printf "\n"
printf "${LIGHTGREEN}%s${NC}\n" "All jobs done."
printf "\n"
